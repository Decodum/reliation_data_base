1. в докер файле указан путь к sql коду джуна и есть команда для его автоматического запуска
------------------------------------------------------------------------------------
2. Команда для подключения к работающему контейнеру Docker и запуска интерфейса psql:
docker exec -it  psql -U  -d 
Также для того, чтобы менять SQL скрипт "на лету" необходимо в терминале зайти в интерфейс psql таким образом, и затем, вномить изменения.

1. Убедитесь, что контейнер с PostgreSQL уже запущен. Если вы еще не запустили контейнер, выполните команду `docker start <имя_контейнера>` для его запуска.

2. Для запуска интерфейса psql подключитесь к контейнеру с PostgreSQL, используя команду `docker exec -it <имя_контейнера> psql -U <пользователь> -d <база_данных>`. Замените `<имя_контейнера>`, `<пользователь>` и `<база_данных>` на соответствующие значения.

Например:
```shell
docker exec -it postgres_container psql -U postgres -d database
```

3. После выполнения этой команды вы будете перенаправлены в интерфейс psql, где вы сможете вносить новые данные "на лету". Вы можете использовать стандартные команды SQL, такие как `INSERT`, `UPDATE`, `DELETE`, `SELECT` и т.д., для добавления или изменения данных в базе данных.

Примеры команд:

- Вставка новой записи:
```sql
INSERT INTO database(id, name) VALUES (1, 'John Doe');
```

- Изменение существующей записи:
```sql
UPDATE database SET name = 'Jane Smith' WHERE id = 1;
```

- Удаление записи:
```sql
DELETE FROM database WHERE id = 1;
```

- Выборка данных из таблицы:
```sql
SELECT * FROM database
```

4. Когда вы закончите вносить изменения в базу данных, вы можете выйти из интерфейса psql, нажав `Ctrl + D` или выполнить команду `\q`.

------------------------------------------------------------------------------------
3.Вообще том уже создан, а для восстановления он и нужен. И в случае удаления контенера, уже унтри контейнера пописан скрипт, который при перезапуске контейнера сохраняет все изменения сделанные в нем, так как они записаны в том.
инструкции для создания и использования внешнего тома в контейнере Docker:

1. Создайте внешний том с помощью команды `docker volume create <имя_тома>`. Например, `docker volume create myvolume`.
2. Запустите контейнер и привяжите внешний том к контейнеру с помощью опции `-v` или `--mount`. Например:
docker run -d -v <имя_тома>:<путь_в_контейнере> <имя_образа>
3. Внутри контейнера, вы можете использовать указанный путь `<путь_в_контейнере>` для сохранения и получения данных. Например, `/data`.
4. Если вы хотите сохранить данные из контейнера во внешний том при его остановке или удалении, используйте опцию `--volumes-from` при запуске второго контейнера или команду `docker cp` для копирования данных с контейнера на хостовую машину.

